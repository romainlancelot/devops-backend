name: Build and Push Docker Image to Docker Hub

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: pip install ruff
      - name: Lint
        run: ruff check

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: [3.12]
    services:
      postgres:
        image: postgres
        ports:
          - ${{ vars.DB_PORT }}:5432
        env:
          POSTGRES_DB: ${{ vars.DB_NAME }}
          POSTGRES_USER: ${{ vars.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: pip install -r requirements/requirements.txt
      - name: Run tests
        run: coverage run manage.py test && coverage xml
        env:
          DB_HOST: localhost
          DB_NAME: ${{ vars.DB_NAME }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ vars.DB_PORT }}
      - name: Coverage
        uses: orgoro/coverage@v3.2
        with:
          coverage_file: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}

  push_to_registry:
    name: Push docker image to hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check repository
        uses: actions/checkout@v4
      - name: Login to docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push docker image to registry
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-backend:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-backend:latest

  helm_deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: push_to_registry
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
      - name: Install helm
        uses: azure/setup-helm@v4.2.0
      - name: Create kubeconfig file
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install \
            --namespace ${{ vars.KUBE_NAMESPACE }} \
            --kubeconfig kubeconfig.yaml \
            --set backend.deployment.imageTag=${{ github.sha }} \
            --set postgresql.deployment.postgresqlUsername=${{ vars.DB_USER }} \
            --set postgresql.deployment.postgresqlPassword=${{ secrets.DB_PASSWORD }} \
            --set postgresql.deployment.postgresqlDatabase=${{ vars.DB_NAME }} \
            ${{ vars.HELM_CHART }} ./${{ vars.HELM_CHART }}

  healthcheck:
    name: Healthcheck
    runs-on: ubuntu-latest
    needs: helm_deploy
    steps:
      - name: Check the deployed service URL
        uses: jtalk/url-health-check-action@v4
        with:
          url: ${{ vars.HEALTHCHECK_ROUTE }}
          follow-redirect: false
          max-attempts: 3
          retry-delay: 30s
          retry-all: false
